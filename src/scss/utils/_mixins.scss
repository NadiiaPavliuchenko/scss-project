@use "sass:map";
@use "sass:list";

@use "variables" as var;

@mixin mq($bp, $type: min) {
  @if map.has-key($map: var.$breakpoints, $key: $bp) {
    $width: map-get(
      $map: var.$breakpoints,
      $key: $bp,
    );

    @if $type==max {
      $width: $width - 0.02px;
    }
    @media screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

@mixin ease($type, $props...) {
  @if map.has-key(var.$easings, $type) {
    $ease: map.get(var.$easings, $type);
    transition: $ease;
  } @else {
    @warn 'no key';
  }
  @if (list.length($props) > 0) {
    transition-property: $props;
  }
}

@mixin transition($params) {
  -webkit-transition: $params;
  -moz-transition: $params;
  -khtml-transition: $params;
  -o-transition: $params;
  transition: $params;
}

@mixin scale($params) {
  -webkit-transform: scale($params);
  -moz-transform: scale($params);
  -khtml-transform: scale($params);
  -o-transform: scale($params);
  transform: scale($params);
}

@mixin box-shadow($params) {
  -webkit-box-shadow: $params;
  -moz-box-shadow: $params;
  -khtml-box-shadow: $params;
  -o-box-shadow: $params;
  box-shadow: $params;
}

@mixin rotate($params) {
  -webkit-transform: rotate($params);
  -moz-transform: rotate($params);
  -khtml-transform: rotate($params);
  -o-transform: rotate($params);
  transform: rotate($params);
}

@mixin opacity($opacity) {
  -webkit-opacity: $opacity;
  -moz-opacity: $opacity;
  -khtml-opacity: $opacity;
  -o-opacity: $opacity;
  opacity: $opacity;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -khtml-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
}
